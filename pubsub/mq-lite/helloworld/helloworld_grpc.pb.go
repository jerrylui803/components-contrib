// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package helloworld

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessageBusClient is the client API for MessageBus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageBusClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	// Sends another greeting
	SayHelloAgain(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	Publish(ctx context.Context, in *LamtaEventInfo, opts ...grpc.CallOption) (*LamtaGrpcResponse, error)
	Subscribe(ctx context.Context, opts ...grpc.CallOption) (MessageBus_SubscribeClient, error)
}

type messageBusClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageBusClient(cc grpc.ClientConnInterface) MessageBusClient {
	return &messageBusClient{cc}
}

func (c *messageBusClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/lamta.framework.eventbus.grpc.MessageBus/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageBusClient) SayHelloAgain(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/lamta.framework.eventbus.grpc.MessageBus/SayHelloAgain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageBusClient) Publish(ctx context.Context, in *LamtaEventInfo, opts ...grpc.CallOption) (*LamtaGrpcResponse, error) {
	out := new(LamtaGrpcResponse)
	err := c.cc.Invoke(ctx, "/lamta.framework.eventbus.grpc.MessageBus/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageBusClient) Subscribe(ctx context.Context, opts ...grpc.CallOption) (MessageBus_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessageBus_ServiceDesc.Streams[0], "/lamta.framework.eventbus.grpc.MessageBus/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageBusSubscribeClient{stream}
	return x, nil
}

type MessageBus_SubscribeClient interface {
	Send(*LamtaEventSubscribeRequest) error
	Recv() (*LamtaGrpcEventResponse, error)
	grpc.ClientStream
}

type messageBusSubscribeClient struct {
	grpc.ClientStream
}

func (x *messageBusSubscribeClient) Send(m *LamtaEventSubscribeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageBusSubscribeClient) Recv() (*LamtaGrpcEventResponse, error) {
	m := new(LamtaGrpcEventResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessageBusServer is the server API for MessageBus service.
// All implementations must embed UnimplementedMessageBusServer
// for forward compatibility
type MessageBusServer interface {
	// Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	// Sends another greeting
	SayHelloAgain(context.Context, *HelloRequest) (*HelloReply, error)
	Publish(context.Context, *LamtaEventInfo) (*LamtaGrpcResponse, error)
	Subscribe(MessageBus_SubscribeServer) error
	mustEmbedUnimplementedMessageBusServer()
}

// UnimplementedMessageBusServer must be embedded to have forward compatible implementations.
type UnimplementedMessageBusServer struct {
}

func (UnimplementedMessageBusServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedMessageBusServer) SayHelloAgain(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHelloAgain not implemented")
}
func (UnimplementedMessageBusServer) Publish(context.Context, *LamtaEventInfo) (*LamtaGrpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedMessageBusServer) Subscribe(MessageBus_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedMessageBusServer) mustEmbedUnimplementedMessageBusServer() {}

// UnsafeMessageBusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageBusServer will
// result in compilation errors.
type UnsafeMessageBusServer interface {
	mustEmbedUnimplementedMessageBusServer()
}

func RegisterMessageBusServer(s grpc.ServiceRegistrar, srv MessageBusServer) {
	s.RegisterService(&MessageBus_ServiceDesc, srv)
}

func _MessageBus_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageBusServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lamta.framework.eventbus.grpc.MessageBus/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageBusServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageBus_SayHelloAgain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageBusServer).SayHelloAgain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lamta.framework.eventbus.grpc.MessageBus/SayHelloAgain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageBusServer).SayHelloAgain(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageBus_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LamtaEventInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageBusServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lamta.framework.eventbus.grpc.MessageBus/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageBusServer).Publish(ctx, req.(*LamtaEventInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageBus_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageBusServer).Subscribe(&messageBusSubscribeServer{stream})
}

type MessageBus_SubscribeServer interface {
	Send(*LamtaGrpcEventResponse) error
	Recv() (*LamtaEventSubscribeRequest, error)
	grpc.ServerStream
}

type messageBusSubscribeServer struct {
	grpc.ServerStream
}

func (x *messageBusSubscribeServer) Send(m *LamtaGrpcEventResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageBusSubscribeServer) Recv() (*LamtaEventSubscribeRequest, error) {
	m := new(LamtaEventSubscribeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessageBus_ServiceDesc is the grpc.ServiceDesc for MessageBus service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageBus_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lamta.framework.eventbus.grpc.MessageBus",
	HandlerType: (*MessageBusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _MessageBus_SayHello_Handler,
		},
		{
			MethodName: "SayHelloAgain",
			Handler:    _MessageBus_SayHelloAgain_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _MessageBus_Publish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _MessageBus_Subscribe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "helloworld/helloworld.proto",
}
